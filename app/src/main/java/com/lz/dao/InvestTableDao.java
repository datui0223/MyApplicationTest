package com.lz.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lz.sqlbean.ProductTable;

import com.lz.sqlbean.InvestTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVEST_TABLE".
*/
public class InvestTableDao extends AbstractDao<InvestTable, Long> {

    public static final String TABLENAME = "INVEST_TABLE";

    /**
     * Properties of entity InvestTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property InvestId = new Property(0, Long.class, "investId", true, "_id");
        public final static Property InvestMoney = new Property(1, double.class, "investMoney", false, "INVEST_MONEY");
        public final static Property InvestDate = new Property(2, java.util.Date.class, "investDate", false, "INVEST_DATE");
        public final static Property InvestIncome = new Property(3, double.class, "investIncome", false, "INVEST_INCOME");
        public final static Property Pid = new Property(4, Long.class, "pid", false, "PID");
        public final static Property Oid = new Property(5, Long.class, "oid", false, "OID");
    }

    private DaoSession daoSession;

    private Query<InvestTable> order_InvestTablesQuery;

    public InvestTableDao(DaoConfig config) {
        super(config);
    }
    
    public InvestTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVEST_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: investId
                "\"INVEST_MONEY\" REAL NOT NULL ," + // 1: investMoney
                "\"INVEST_DATE\" INTEGER," + // 2: investDate
                "\"INVEST_INCOME\" REAL NOT NULL ," + // 3: investIncome
                "\"PID\" INTEGER," + // 4: pid
                "\"OID\" INTEGER);"); // 5: oid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVEST_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InvestTable entity) {
        stmt.clearBindings();
 
        Long investId = entity.getInvestId();
        if (investId != null) {
            stmt.bindLong(1, investId);
        }
        stmt.bindDouble(2, entity.getInvestMoney());
 
        java.util.Date investDate = entity.getInvestDate();
        if (investDate != null) {
            stmt.bindLong(3, investDate.getTime());
        }
        stmt.bindDouble(4, entity.getInvestIncome());
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(5, pid);
        }
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(6, oid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InvestTable entity) {
        stmt.clearBindings();
 
        Long investId = entity.getInvestId();
        if (investId != null) {
            stmt.bindLong(1, investId);
        }
        stmt.bindDouble(2, entity.getInvestMoney());
 
        java.util.Date investDate = entity.getInvestDate();
        if (investDate != null) {
            stmt.bindLong(3, investDate.getTime());
        }
        stmt.bindDouble(4, entity.getInvestIncome());
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(5, pid);
        }
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(6, oid);
        }
    }

    @Override
    protected final void attachEntity(InvestTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InvestTable readEntity(Cursor cursor, int offset) {
        InvestTable entity = new InvestTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // investId
            cursor.getDouble(offset + 1), // investMoney
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // investDate
            cursor.getDouble(offset + 3), // investIncome
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // pid
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // oid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InvestTable entity, int offset) {
        entity.setInvestId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInvestMoney(cursor.getDouble(offset + 1));
        entity.setInvestDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setInvestIncome(cursor.getDouble(offset + 3));
        entity.setPid(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InvestTable entity, long rowId) {
        entity.setInvestId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InvestTable entity) {
        if(entity != null) {
            return entity.getInvestId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InvestTable entity) {
        return entity.getInvestId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "investTables" to-many relationship of Order. */
    public List<InvestTable> _queryOrder_InvestTables(Long oid) {
        synchronized (this) {
            if (order_InvestTablesQuery == null) {
                QueryBuilder<InvestTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Oid.eq(null));
                order_InvestTablesQuery = queryBuilder.build();
            }
        }
        Query<InvestTable> query = order_InvestTablesQuery.forCurrentThread();
        query.setParameter(0, oid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductTableDao().getAllColumns());
            builder.append(" FROM INVEST_TABLE T");
            builder.append(" LEFT JOIN PRODUCT_TABLE T0 ON T.\"PID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected InvestTable loadCurrentDeep(Cursor cursor, boolean lock) {
        InvestTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProductTable productTable = loadCurrentOther(daoSession.getProductTableDao(), cursor, offset);
        entity.setProductTable(productTable);

        return entity;    
    }

    public InvestTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<InvestTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InvestTable> list = new ArrayList<InvestTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<InvestTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<InvestTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
