package com.lz.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lz.bean.OrderByProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_BY_PRODUCT".
*/
public class OrderByProductDao extends AbstractDao<OrderByProduct, Long> {

    public static final String TABLENAME = "ORDER_BY_PRODUCT";

    /**
     * Properties of entity OrderByProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Opid = new Property(0, Long.class, "opid", true, "_id");
        public final static Property Pid = new Property(1, Long.class, "pid", false, "PID");
        public final static Property Oid = new Property(2, Long.class, "oid", false, "OID");
    }


    public OrderByProductDao(DaoConfig config) {
        super(config);
    }
    
    public OrderByProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_BY_PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: opid
                "\"PID\" INTEGER," + // 1: pid
                "\"OID\" INTEGER);"); // 2: oid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_BY_PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderByProduct entity) {
        stmt.clearBindings();
 
        Long opid = entity.getOpid();
        if (opid != null) {
            stmt.bindLong(1, opid);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(3, oid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderByProduct entity) {
        stmt.clearBindings();
 
        Long opid = entity.getOpid();
        if (opid != null) {
            stmt.bindLong(1, opid);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(3, oid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderByProduct readEntity(Cursor cursor, int offset) {
        OrderByProduct entity = new OrderByProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // opid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // oid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderByProduct entity, int offset) {
        entity.setOpid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderByProduct entity, long rowId) {
        entity.setOpid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderByProduct entity) {
        if(entity != null) {
            return entity.getOpid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderByProduct entity) {
        return entity.getOpid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
