package com.lz.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lz.sqlbean.OrderByProduct;

import com.lz.sqlbean.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Oid = new Property(0, Long.class, "oid", true, "_id");
        public final static Property Odate = new Property(1, java.util.Date.class, "odate", false, "ODATE");
        public final static Property Uid = new Property(2, Long.class, "uid", false, "UID");
    }

    private DaoSession daoSession;

    private Query<Order> productTable_OrdersQuery;
    private Query<Order> user_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: oid
                "\"ODATE\" INTEGER," + // 1: odate
                "\"UID\" INTEGER);"); // 2: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(1, oid);
        }
 
        java.util.Date odate = entity.getOdate();
        if (odate != null) {
            stmt.bindLong(2, odate.getTime());
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(3, uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long oid = entity.getOid();
        if (oid != null) {
            stmt.bindLong(1, oid);
        }
 
        java.util.Date odate = entity.getOdate();
        if (odate != null) {
            stmt.bindLong(2, odate.getTime());
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(3, uid);
        }
    }

    @Override
    protected final void attachEntity(Order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // oid
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // odate
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOdate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setOid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getOid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getOid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of ProductTable. */
    public List<Order> _queryProductTable_Orders(Long pid) {
        synchronized (this) {
            if (productTable_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.join(OrderByProduct.class, OrderByProductDao.Properties.Oid)
                    .where(OrderByProductDao.Properties.Pid.eq(pid));
                productTable_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = productTable_OrdersQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

    /** Internal query to resolve the "orders" to-many relationship of User. */
    public List<Order> _queryUser_Orders(Long uid) {
        synchronized (this) {
            if (user_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                user_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = user_OrdersQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
